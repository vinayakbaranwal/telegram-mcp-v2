# Production Dockerfile for Telegram MCP with enhanced Telethon support
FROM python:3.13-alpine

# Set the working directory in the container
WORKDIR /app

# Prevent Python from writing pyc files to disc and ensure output is sent to terminal
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Install system dependencies for Telethon and production use
RUN apk add --no-cache \
    gcc \
    musl-dev \
    libffi-dev \
    openssl-dev \
    curl \
    && rm -rf /var/cache/apk/*

# Copy dependency files
COPY requirements.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY main.py .

# Create a non-root user for security
RUN adduser --disabled-password --gecos "" appuser && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Production environment variables
ENV TELEGRAM_API_ID=""
ENV TELEGRAM_API_HASH=""
ENV TELEGRAM_SESSION_STRING=""

# SSE/HTTP server configuration (production defaults)
ENV TELEGRAM_MCP_HOST="0.0.0.0"
ENV TELEGRAM_MCP_PORT="3001"
ENV TELEGRAM_MCP_SSE_API_KEY=""

# Telethon-specific optimizations
ENV TELETHON_TIMEOUT=30
ENV TELETHON_RETRY_DELAY=1
ENV TELETHON_CONNECTION_RETRIES=5

# Expose port 3001 for SSE/HTTP transport
EXPOSE 3001

# Health check for production monitoring
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3001/sse || exit 1

# Default command (can be overridden)
CMD ["python", "main.py", "-t", "sse"]
